import jsPDF from 'jspdf';
import { FormField, Form, FormResponse } from '@shared/schema';

interface PDFFormData {
  title: string;
  description: string;
  fields: FormField[];
  themeColor: string;
}

interface PDFResponseData extends PDFFormData {
  responses: Record<string, any>;
  submittedAt: string;
}

export const exportFormAsPDF = (form: PDFFormData) => {
  const pdf = new jsPDF();
  let yPosition = 20;
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);

  // Helper function to check if we need a new page
  const checkNewPage = (requiredHeight: number) => {
    if (yPosition + requiredHeight > pdf.internal.pageSize.getHeight() - 20) {
      pdf.addPage();
      yPosition = 20;
    }
  };

  // Title
  pdf.setFontSize(20);
  pdf.setFont(undefined, 'bold');
  pdf.text(form.title || 'Untitled Form', margin, yPosition);
  yPosition += 15;

  // Description
  if (form.description) {
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'normal');
    const descriptionLines = pdf.splitTextToSize(form.description, contentWidth);
    checkNewPage(descriptionLines.length * 7);
    pdf.text(descriptionLines, margin, yPosition);
    yPosition += descriptionLines.length * 7 + 10;
  }

  // Draw a line separator
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Fields
  form.fields.forEach((field, index) => {
    checkNewPage(40); // Minimum space needed for a field

    // Field label
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    const labelText = `${index + 1}. ${field.label}${field.required ? ' *' : ''}`;
    pdf.text(labelText, margin, yPosition);
    yPosition += 10;

    // Field input area based on type
    pdf.setFont(undefined, 'normal');
    pdf.setDrawColor(100, 100, 100);

    switch (field.type) {
      case 'text':
      case 'email':
      case 'number':
      case 'date':
      case 'time':
        // Single line input
        pdf.rect(margin, yPosition, contentWidth, 8);
        if (field.placeholder) {
          pdf.setFontSize(10);
          pdf.setTextColor(150, 150, 150);
          pdf.text(field.placeholder, margin + 2, yPosition + 6);
          pdf.setTextColor(0, 0, 0);
        }
        yPosition += 20;
        break;

      case 'textarea':
        // Multi-line input
        pdf.rect(margin, yPosition, contentWidth, 24);
        if (field.placeholder) {
          pdf.setFontSize(10);
          pdf.setTextColor(150, 150, 150);
          pdf.text(field.placeholder, margin + 2, yPosition + 8);
          pdf.setTextColor(0, 0, 0);
        }
        yPosition += 36;
        break;

      case 'select':
        // Dropdown placeholder
        pdf.rect(margin, yPosition, contentWidth, 8);
        pdf.text(field.placeholder || 'Select an option â–¼', margin + 2, yPosition + 6);
        if (field.options && field.options.length > 0) {
          yPosition += 12;
          pdf.setFontSize(10);
          pdf.setTextColor(100, 100, 100);
          pdf.text('Options: ' + field.options.join(', '), margin, yPosition);
          pdf.setTextColor(0, 0, 0);
        }
        yPosition += 20;
        break;

      case 'radio':
        // Radio buttons
        field.options?.forEach((option, optionIndex) => {
          checkNewPage(12);
          pdf.circle(margin + 3, yPosition + 3, 2);
          pdf.text(option, margin + 10, yPosition + 5);
          yPosition += 12;
        });
        yPosition += 8;
        break;

      case 'checkbox':
        // Checkboxes
        field.options?.forEach((option, optionIndex) => {
          checkNewPage(12);
          pdf.rect(margin, yPosition, 6, 6);
          pdf.text(option, margin + 10, yPosition + 5);
          yPosition += 12;
        });
        yPosition += 8;
        break;

      case 'toggle':
        // Toggle switch
        pdf.rect(margin, yPosition, 20, 8);
        pdf.text(field.placeholder || 'Toggle option', margin + 25, yPosition + 6);
        yPosition += 20;
        break;

      case 'range':
        // Range slider
        pdf.line(margin, yPosition + 4, margin + contentWidth - 20, yPosition + 4);
        pdf.circle(margin + 50, yPosition + 4, 2);
        yPosition += 20;
        break;

      default:
        // Default to text input
        pdf.rect(margin, yPosition, contentWidth, 8);
        yPosition += 20;
        break;
    }

    yPosition += 10; // Space between fields
  });

  // Footer
  const footerY = pdf.internal.pageSize.getHeight() - 15;
  pdf.setFontSize(8);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by Open Forms', margin, footerY);
  pdf.text(new Date().toLocaleDateString(), pageWidth - margin - 30, footerY);

  // Download the PDF
  const fileName = `${form.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_form.pdf`;
  pdf.save(fileName);
};

export const exportResponseAsPDF = (form: PDFFormData, response: FormResponse) => {
  const pdf = new jsPDF();
  let yPosition = 20;
  const pageWidth = pdf.internal.pageSize.getWidth();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);

  // Helper function to check if we need a new page
  const checkNewPage = (requiredHeight: number) => {
    if (yPosition + requiredHeight > pdf.internal.pageSize.getHeight() - 20) {
      pdf.addPage();
      yPosition = 20;
    }
  };

  // Title
  pdf.setFontSize(20);
  pdf.setFont(undefined, 'bold');
  pdf.text(form.title || 'Untitled Form', margin, yPosition);
  yPosition += 10;

  // Submission info
  pdf.setFontSize(10);
  pdf.setFont(undefined, 'normal');
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Submitted: ${new Date(response.submittedAt).toLocaleString()}`, margin, yPosition);
  yPosition += 15;
  pdf.setTextColor(0, 0, 0);

  // Description
  if (form.description) {
    pdf.setFontSize(12);
    const descriptionLines = pdf.splitTextToSize(form.description, contentWidth);
    checkNewPage(descriptionLines.length * 7);
    pdf.text(descriptionLines, margin, yPosition);
    yPosition += descriptionLines.length * 7 + 10;
  }

  // Draw a line separator
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, yPosition, pageWidth - margin, yPosition);
  yPosition += 15;

  // Fields with responses
  form.fields.forEach((field, index) => {
    checkNewPage(30);

    // Field label
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'bold');
    const labelText = `${index + 1}. ${field.label}${field.required ? ' *' : ''}`;
    pdf.text(labelText, margin, yPosition);
    yPosition += 10;

    // Response value
    pdf.setFont(undefined, 'normal');
    const responseValue = response.responses[field.id];
    
    if (responseValue !== undefined && responseValue !== null && responseValue !== '') {
      pdf.setFontSize(11);
      
      switch (field.type) {
        case 'checkbox':
          // Handle array responses for checkboxes
          if (Array.isArray(responseValue)) {
            const selectedOptions = responseValue.join(', ');
            const responseLines = pdf.splitTextToSize(selectedOptions, contentWidth - 20);
            pdf.text(responseLines, margin + 10, yPosition);
            yPosition += responseLines.length * 7;
          } else {
            pdf.text(String(responseValue), margin + 10, yPosition);
            yPosition += 7;
          }
          break;
          
        case 'textarea':
          // Handle multi-line text
          const textLines = pdf.splitTextToSize(String(responseValue), contentWidth - 20);
          pdf.text(textLines, margin + 10, yPosition);
          yPosition += textLines.length * 7;
          break;
          
        default:
          // Handle single-line responses
          const responseLines = pdf.splitTextToSize(String(responseValue), contentWidth - 20);
          pdf.text(responseLines, margin + 10, yPosition);
          yPosition += responseLines.length * 7;
          break;
      }
    } else {
      // No response provided
      pdf.setFontSize(10);
      pdf.setTextColor(150, 150, 150);
      pdf.text('(No response)', margin + 10, yPosition);
      pdf.setTextColor(0, 0, 0);
      yPosition += 7;
    }

    yPosition += 15; // Space between fields
  });

  // Footer
  const footerY = pdf.internal.pageSize.getHeight() - 15;
  pdf.setFontSize(8);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by Open Forms', margin, footerY);
  pdf.text(new Date().toLocaleDateString(), pageWidth - margin - 30, footerY);

  // Download the PDF
  const fileName = `${form.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_response_${response.id}.pdf`;
  pdf.save(fileName);
};